# Logging Configuration
#
# This file configures logging for the AI Player system using the existing
# async logging pattern from src/lib/log.py. Supports structured logging
# with configurable granularity levels for different system components.

version: 1
disable_existing_loggers: false

formatters:
  detailed:
    format: '%(asctime)s - %(name)s - %(levelname)s - [%(filename)s:%(lineno)d] - %(message)s'
    datefmt: '%Y-%m-%d %H:%M:%S'
  
  simple:
    format: '%(levelname)s - %(name)s - %(message)s'
  
  json:
    format: '{"timestamp": "%(asctime)s", "level": "%(levelname)s", "logger": "%(name)s", "message": "%(message)s", "module": "%(module)s", "line": %(lineno)d}'
    datefmt: '%Y-%m-%dT%H:%M:%S'

handlers:
  console:
    class: logging.StreamHandler
    level: INFO
    formatter: simple
    stream: ext://sys.stdout
  
  file:
    class: logging.handlers.RotatingFileHandler
    level: DEBUG
    formatter: detailed
    filename: logs/ai_player.log
    maxBytes: 10485760  # 10MB
    backupCount: 5
  
  error_file:
    class: logging.handlers.RotatingFileHandler
    level: ERROR
    formatter: detailed
    filename: logs/ai_player_errors.log
    maxBytes: 10485760  # 10MB
    backupCount: 3

loggers:
  # AI Player components
  ai_player:
    level: INFO
    handlers: [console, file]
    propagate: false
  
  ai_player.goap:
    level: DEBUG
    handlers: [file]
    propagate: false
  
  ai_player.actions:
    level: INFO
    handlers: [console, file]
    propagate: false
  
  ai_player.state:
    level: INFO
    handlers: [file]
    propagate: false
  
  # Game data and API
  game_data:
    level: INFO
    handlers: [console, file]
    propagate: false
  
  game_data.api:
    level: WARNING
    handlers: [file, error_file]
    propagate: false
  
  # CLI interface
  cli:
    level: INFO
    handlers: [console]
    propagate: false
  
  # Diagnostics
  diagnostics:
    level: DEBUG
    handlers: [console, file]
    propagate: false

root:
  level: WARNING
  handlers: [console, error_file]