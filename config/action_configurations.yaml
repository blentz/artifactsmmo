# Action Configuration for Metaprogramming
# This file defines how actions are instantiated and executed dynamically

# Action configurations using snake_case to CamelCase naming convention
# Snake case action names are dynamically mapped to CamelCase class names
# Example: analyze_equipment -> AnalyzeEquipmentAction

action_configurations:
  # Core consolidated actions
  analyze_equipment:
    type: "builtin"
    description: "Analyze equipment status and set upgrade targets"
    
  select_recipe:
    type: "builtin"
    description: "Select optimal recipe for equipment crafting"
    
    
  check_material_availability:
    type: "builtin"
    description: "Check if required materials are available in inventory"
    
  determine_material_insufficiency:
    type: "builtin"
    description: "Determine that required materials are insufficient and need gathering"
    
    
  gather_resource_quantity:
    type: "builtin"
    description: "Gather specific quantity of resources to meet crafting needs"
    
    
  gather_missing_materials:
    type: "builtin"
    description: "Gather materials when they are determined to be insufficient"
    
  check_gathering_complete:
    type: "builtin"
    description: "Check if material gathering is complete and re-verify availability"
    
  gather_materials:
    type: "builtin"
    description: "Gather materials when they are determined to be insufficient (alias for gather_missing_materials)"
    
  check_gathering:
    type: "builtin"
    description: "Check if material gathering is complete (alias for check_gathering_complete)"
    
  verify_skill_requirements:
    type: "builtin"
    description: "Verify character has sufficient skill level for crafting"
    
  fight:
    type: "builtin"
    description: "Fight monsters using consolidated state format"
    
  initiate_combat_search:
    type: "builtin"
    description: "Bridge action to transition combat context from idle to searching"
    
  scan:
    type: "builtin"
    description: "Scan surrounding area for workshops and resources"
    
  gather:
    type: "builtin"
    description: "Gather resources using consolidated state format"
    
  craft:
    type: "builtin"
    description: "Craft items using consolidated state format"
    
  equip:
    type: "builtin"
    description: "Equip items using consolidated state format"
    
  unequip:
    type: "builtin"
    description: "Unequip items using consolidated state format"
  
  # Core actions
  move:
    type: "builtin"  # Uses default factory setup
    description: "Move character to a target location"
    
  attack:
    type: "builtin"
    description: "Attack a monster in combat"
    
  rest:
    type: "builtin"  
    description: "Rest to recover HP when critically low"
    
  map_lookup:
    type: "builtin"
    description: "Look up map information at coordinates"
    
  find_monsters:
    type: "builtin"
    description: "Find nearby monsters suitable for combat"
    
  wait:
    type: "builtin"
    description: "Wait for cooldown to expire"
    
  gather_resources:
    type: "builtin"
    description: "Gather resources from the environment"
    
  find_resources:
    type: "builtin"
    description: "Find resource locations on the map"
    
  craft_item:
    type: "builtin"
    description: "Craft items at workshops using materials"
    
  lookup_material_requirements:
    type: "builtin"
    description: "Look up what materials are needed for target equipment"
    
  transform_material:
    type: "builtin"
    description: "Transform raw materials into refined materials at workshops"
    
  lookup_item_info:
    type: "builtin"
    description: "Look up item information and crafting recipes"
    
    
  execute_crafting_plan:
    type: "builtin"
    description: "Execute crafting plan including unequipping materials and crafting"
    
  equip_item:
    type: "builtin"
    description: "Equip an item from inventory"
    
  unequip_item:
    type: "builtin"
    description: "Unequip an item to inventory"
    
  explore_map:
    type: "builtin"
    description: "Explore the map to discover content"
    
  analyze_nearby_resources:
    type: "builtin"
    description: "Analyze nearby resources for crafting opportunities using simplified base class approach"
    
  analyze_equipment_gaps:
    type: "builtin"
    description: "Analyze all equipment slots and calculate upgrade priorities"
    
  select_optimal_slot:
    type: "builtin"
    description: "Select optimal equipment slot based on gaps and crafting skill"
    
  evaluate_recipes:
    type: "builtin"
    description: "Evaluate recipes for specified equipment slot and select the best craftable option"
    
  bootstrap_equipment_workflow:
    type: "composite"
    description: "Complete equipment bootstrap workflow for new characters"
    
  basic_weapon_upgrade:
    type: "composite"
    description: "Basic weapon upgrade workflow for level 2-3 characters"
    
  transform_raw_materials:
    type: "builtin" 
    description: "Transform raw materials into refined materials (smelting)"
    
  # Bridge actions for material transformation workflow
  analyze_materials_for_transformation:
    type: "builtin"
    description: "Analyze inventory to determine which materials to transform"
    
  determine_workshop_requirements:
    type: "builtin"
    description: "Determine which workshop is needed for each transformation"
    
  navigate_to_workshop:
    type: "builtin"
    description: "Navigate character to a specific workshop type"
    
  execute_material_transformation:
    type: "builtin"
    description: "Execute a single material transformation at current workshop"
    
  # Equipment upgrade actions
  initiate_equipment_analysis:
    type: "builtin"
    description: "Initiate equipment analysis to prepare for upgrades"
    
  select_optimal_slot:
    type: "builtin"
    description: "Select the optimal equipment slot for crafting based on gaps and skill"
    
  mark_equipment_crafting:
    type: "builtin"
    description: "Mark equipment status as crafting to track upgrade progress"
    
  complete_equipment_upgrade:
    type: "builtin"
    description: "Complete the equipment upgrade process after crafting"

  # Equipment progression action configurations
  find_workshops:
    type: "builtin"
    description: "Find and catalog crafting workshops using find_resources action"
          
  move_to_workshop:
    type: "builtin"
    description: "Move character to a known workshop location"
          
  move_to_resource:
    type: "builtin"
    description: "Move character to a known resource location"
    
  find_correct_workshop:
    type: "builtin"
    description: "Find and move to the correct workshop type for crafting a specific item"
    
  evaluate_weapon_recipes:
    type: "builtin"
    description: "Intelligently evaluate all weapon recipes and select the best craftable option"
    
  upgrade_weaponcrafting_skill:
    type: "builtin"
    description: "Level up weaponcrafting skill through strategic item crafting"
    
  check_skill_requirement:
    type: "builtin"
    description: "Check skill requirements for a task and set appropriate state variables"
    
  find_xp_sources:
    type: "builtin"
    description: "Find all sources that grant XP for a specific skill using effects analysis"
    
  gather_crafting_materials:
    type: "composite"
    description: "Gather materials needed for equipment crafting"

  # Custom/extensible actions using YAML configuration
  hunt:
    type: "composite"
    description: "Hunt monsters using intelligent search and attack"
    sequence:
      - action: "find_monsters"
        params:
          search_radius: 5
          use_intelligent_search: true
      - action: "attack"
        conditions:
          monster_found: true
        
  # Future extensible actions could be defined here
  # gather_resources:
  #   type: "yaml_defined"
  #   class_path: "src.controller.actions.gather.GatherResourcesAction"
  #   constructor_params:
  #     char_name: "character_name"
  #     resource_type: "resource_type"
  #     quantity: "quantity"
  #   preprocessors:
  #     resource_type: "src.lib.utils.normalize_resource_name"
  #   postprocessors:
  #     response: "src.lib.utils.format_gather_response"

# Default parameter mappings for common patterns
parameter_mappings:
  character_context:
    character_name: "character_state.name"
    character_x: "character_state.data.x"
    character_y: "character_state.data.y" 
    character_level: "character_state.data.level"
    character_hp: "character_state.data.hp"
    
  action_defaults:
    search_radius: 5
    level_range: 2
    use_intelligent_search: true
    
  # Action-specific parameter defaults
  craft_copper_defaults:
    item_code: "copper"
    quantity: 1
    
# Configuration for analyze_resources action priorities  
# These priorities are used when evaluating equipment crafting opportunities
resource_analysis_priorities:
  equipment_type_priorities:
    weapon: 3           # Weapons have highest priority for damage output
    body_armor: 2       # Body armor for survivability
    helmet: 2           # Head protection
    leg_armor: 2        # Leg protection
    boots: 2            # Foot protection
    ring: 1             # Accessories have lower priority
    amulet: 1           # Accessories have lower priority
    utility: 1          # Utility items have lowest priority
    
  level_appropriateness_priorities:
    good: 3             # Level-appropriate equipment (within 1 level)
    acceptable: 2       # Slightly off level but usable (within 3 levels)
    poor: 1             # Too far from character level (more than 3 levels)

# Configuration for check_inventory action item categorization
# These are fallback patterns used when API/knowledge base data is not available
inventory_categorization_patterns:
  raw_materials:
    - "_ore"
    - "_rocks" 
    - "_tree"
    - "_wood"
    - "_spot"
  refined_materials:
    - "copper"
    - "iron"
    - "coal"
    - "gold"
    - "_plank"
  crafted_items:
    - "_dagger"
    - "_sword"
    - "_staff"
    - "_helmet"
    - "_armor"
  consumables:
    - "potion"
    - "food"
    - "raw_"
    - "cooked_"

# Configuration for evaluate_weapon_recipes action
# Stat weights for weapon evaluation - higher values mean more important stats
weapon_stat_weights:
  attack_fire: 2.0
  attack_earth: 2.0
  attack_water: 2.0
  attack_air: 2.0
  dmg: 3.0           # Base damage is most important
  dmg_fire: 2.0
  dmg_earth: 2.0
  dmg_water: 2.0
  dmg_air: 2.0
  critical_strike: 1.5
  hp: 1.0
  haste: 1.2
  wisdom: 0.8
  default: 1.0       # Default weight for unknown stats

# Basic weapons to check when evaluating skill blocks
# These are common early-game weapons that help determine progression paths
basic_weapon_codes:
  - "copper_dagger"
  - "wooden_staff"
  - "iron_dagger"
  - "bronze_sword"

# Configuration for evaluate_weapon_recipes action
evaluate_weapon_recipes:
  max_weapons_to_evaluate: 50      # With level filtering, this should be sufficient
  max_weapon_level_above_character: 1  # Only consider weapons up to 1 level above character
  max_weapon_level_below_character: 1  # Only consider weapons up to 1 level below character
  craftability_scoring:
    inventory_proximity_weight: 1000  # Very high weight for recipes we're close to completing
    stat_improvement_weight: 50
    stat_improvement_multiplier: 5
    level_appropriateness_weight: 25
    max_level_difference: 1
    skill_penalty_multiplier: 10

# Bridge action configurations
# These actions handle state transitions without API calls
action_configurations:
  # Combat Flow Bridge Actions
  reset_combat_context:
    type: "builtin"
    description: "Reset combat context from completed to idle"
  
  abort_combat_search:
    type: "builtin"
    description: "Abort combat search when no monsters found"
  
  mark_combat_not_viable:
    type: "builtin"
    description: "Mark combat as not viable when win rate too low"
  
  recover_combat_viability:
    type: "builtin"
    description: "Recover combat viability after equipment upgrade"
  
  # Equipment Flow Bridge Actions
  
  mark_equipment_ready:
    type: "builtin"
    description: "Mark equipment as ready for equipping"
  
  
  reset_equipment_upgrade:
    type: "builtin"
    description: "Reset equipment upgrade for new cycle"
  
  # Healing Flow Bridge Actions
  assess_healing_needs:
    type: "builtin"
    description: "Assess if character needs healing"
  
  initiate_healing:
    type: "builtin"
    description: "Initiate healing process"
  
  complete_healing:
    type: "builtin"
    description: "Complete healing process and set healing_status to complete"
  
  reset_healing_state:
    type: "builtin"
    description: "Reset healing state for new cycle"
