# State Calculation Engine Configuration
# This file defines rules for dynamic state calculation and response processing

# State calculation rules - replaces hardcoded state computation logic
state_calculation:
  # Character health and safety states
  character_safe:
    formula: "hp_percentage >= ${thresholds.safe_hp_percentage}"
    
  needs_rest:
    formula: "hp_percentage < ${thresholds.rest_hp_percentage}"
    
  can_attack:
    formula: "hp_percentage >= ${thresholds.attack_hp_percentage} and not is_on_cooldown"
    
  can_move:
    formula: "character_hp > 0 and not is_on_cooldown"
    
  # Character progression states  
  need_combat:
    formula: "character_level < ${thresholds.combat_level_threshold}"
    
  needs_xp:
    formula: "xp_percentage < 100"
    
  close_to_levelup:
    formula: "xp_percentage >= ${thresholds.levelup_xp_percentage}"
    
  # Resource and equipment states
  need_resources:
    formula: "character_level < ${thresholds.resource_level_threshold}"
    
  need_equipment:
    formula: "character_level < ${thresholds.equipment_level_threshold}"
    
  need_crafting_materials:
    formula: "not has_crafting_materials"
    
  need_workshop_discovery:
    formula: "not workshops_discovered and character_level >= 2"
    
  has_equipment:
    formula: "character_level >= ${thresholds.equipment_level_threshold}"
    
  # Recipe and crafting planning states  
  equipment_info_unknown:
    formula: "need_equipment and not best_weapon_selected"  # Look up recipes only if equipment needed and no weapon selected yet
    
  recipe_known:
    formula: "best_weapon_selected"  # Recipe is known after weapon selection
    
  # Equipment readiness states
  equipment_ready:
    formula: "has_equipment and character_level >= 3"
    
  weapon_crafted:
    formula: "best_weapon_selected and has_crafting_materials"
    
  # Smelting and material processing states
  need_refined_materials:
    formula: "smelting_required == true"
    
  equipment_equipped:
    formula: "character_level >= 2"
    
  character_stats_improved:
    formula: "character_level >= 2"
    
# Computed states that require complex logic
computed_states:
  is_on_cooldown:
    type: "cooldown_check"
    
  character_alive:
    type: "formula"
    formula: "character_hp > 0"
    
  # Combat viability state (still actively used)
  combat_not_viable:
    type: "computed"
    method: "check_combat_viability"
    
  # Equipment progression computed states
  # NOTE: Equipment analysis is now handled by AnalyzeEquipmentAction
  # These states should be set by action responses, not computed here
  need_weapon_upgrade:
    type: "formula"
    formula: "has_better_weapon == false and character_level >= 2"
    
  need_armor_upgrade:
    type: "formula"
    formula: "has_better_armor == false and character_level >= 3"
    
  need_complete_equipment:
    type: "formula"
    formula: "has_complete_equipment_set == false and character_level >= 2"
    
  need_workshop_discovery:
    type: "formula"
    formula: "workshops_discovered == false and character_level >= 2"
    
  need_specific_workshop:
    type: "formula"
    formula: "workshop_requirements_known == true and at_correct_workshop == false"
    
  # Equipment status states
  # These states are set by action execution, not computed
  has_better_weapon:
    type: "formula"
    formula: "equipment_analysis_available == true and weapon_upgrade_available == true"
    
  has_better_armor:
    type: "formula"
    formula: "equipment_analysis_available == true and armor_upgrade_available == true"
    
  has_complete_equipment_set:
    type: "formula"
    formula: "equipment_analysis_available == true and equipment_set_complete == true"
    
  has_crafting_materials:
    type: "formula"
    formula: "inventory_updated == true and materials_sufficient == true"
    
  workshops_discovered:
    type: "formula"
    formula: "workshop_location_known == true"
    
  # Location and crafting states
  at_workshop:
    type: "formula"
    formula: "at_target_location == true and workshop_location_known == true"
    
  at_correct_workshop:
    type: "formula"
    formula: "at_target_location == true and correct_workshop_found == true"
    
  at_resource_location:
    type: "formula"
    formula: "at_target_location == true and resource_location_known == true"
    
  has_materials:
    type: "formula"
    formula: "materials_sufficient == true"
    
  materials_sufficient:
    type: "formula"
    formula: "inventory_updated == true and required_materials_available == true"
    
  # General material checks for crafting workflows
  has_raw_materials:
    type: "formula"
    formula: "inventory_updated == true and raw_materials_available == true"
    
  has_refined_materials:
    type: "formula" 
    formula: "inventory_updated == true and refined_materials_available == true"
    
  material_requirements_known:
    type: "formula"
    formula: "equipment_info_known == true and recipe_known == true"
    
  best_weapon_selected:
    type: "formula"
    formula: "equipment_info_known == true and weapon_selected == true"
    
  craftable_weapon_identified:
    type: "formula" 
    formula: "recipe_known == true and craftable_weapon_found == true"
    
  # Skill progression states
  need_weaponcrafting_upgrade:
    type: "formula"
    formula: "skill_upgrade_needed == true and weaponcrafting_skill_insufficient == true"
    
  need_skill_upgrade:
    type: "formula"
    formula: "skill_upgrade_needed == true"
    
  weaponcrafting_level_sufficient:
    type: "formula"
    formula: "skill_requirements_met == true"

# Response processing rules - replaces hardcoded update_world_state_from_response logic
response_handlers:
  move:
    at_target_location:
      type: "static"
      value: true
    character_x:
      type: "response_field"
      field: "data.character.x"
    character_y:
      type: "response_field"
      field: "data.character.y"
    monster_present:
      type: "conditional"
      condition:
        type: "state_check"
        state_key: "monsters_available"
        value: false
      true_value: false
      false_value: true  # Keep monster_present if monsters are available
      
  find_monsters:
    monsters_available:
      type: "conditional"
      condition:
        type: "response_field"
        field: "location"
        value: null
      true_value: false
      false_value: true
    monster_present:
      type: "conditional"
      condition:
        type: "response_field"
        field: "location"
        value: null
      true_value: false
      false_value: true
    at_target_location:
      type: "conditional"
      condition:
        type: "response_field"
        field: "location"
        value: null
      true_value: true
      false_value: false  # Need to move to monster location
      
  attack:
    monster_present:
      type: "static"
      value: false
    has_hunted_monsters:
      type: "conditional"
      condition:
        type: "response_field"
        field: "data.fight.result"
        value: "win"
      true_value: true
      false_value: true  # Mark as hunted regardless of result
    monsters_available:
      type: "conditional"
      condition:
        type: "response_field"
        field: "data.fight.result"
        value: "win"
      true_value: false
      false_value: false
    monster_defeated:
      type: "conditional"
      condition:
        type: "response_field"
        field: "data.fight.result"
        value: "win"
      true_value: true
      false_value: false
      
  rest:
    character_safe:
      type: "computation"
      method: "calculate_hp_safety"
    needs_rest:
      type: "computation"
      method: "calculate_rest_need"
      
  wait:
    is_on_cooldown:
      type: "static"
      value: false
    can_move:
      type: "static"
      value: true
    can_attack:
      type: "static"
      value: true
      
  # Equipment progression response handlers
  gather_resources:
    has_resources:
      type: "conditional"
      condition:
        type: "response_field"
        field: "data.details.items"
        value: null
      true_value: false
      false_value: true
    inventory_updated:
      type: "static"
      value: true
    at_resource_location:
      type: "static"
      value: true
      
  find_resources:
    resource_location_known:
      type: "conditional"
      condition:
        type: "response_field"
        field: "location"
        value: null
      true_value: false
      false_value: true
    at_resource_location:
      type: "conditional"
      condition:
        type: "response_field"
        field: "location"
        value: null
      true_value: true
      false_value: false
      
  craft_item:
    has_equipment:
      type: "conditional"
      condition:
        type: "response_field"
        field: "data.details.items"
        value: null
      true_value: false
      false_value: true
    inventory_updated:
      type: "static"
      value: true
    at_workshop:
      type: "static"
      value: true
      
  equip_item:
    equipment_equipped:
      type: "static"
      value: true
    character_stats_improved:
      type: "computation"
      method: "calculate_stat_improvement"
    inventory_updated:
      type: "static"
      value: true
      
  unequip_item:
    equipment_equipped:
      type: "static"
      value: false
    inventory_updated:
      type: "static"
      value: true
      
  analyze_resources:
    equipment_analysis_available:
      type: "static"
      value: true
    crafting_opportunities_known:
      type: "static"
      value: true
      
  lookup_item_info:
    equipment_info_known:
      type: "static"
      value: true
    craft_plan_available:
      type: "static"
      value: true
    recipe_known:
      type: "static"
      value: true
      
  smelt_materials:
    has_refined_materials:
      type: "conditional"
      condition:
        type: "response_field"
        field: "success"
      true_value: true
      false_value: false
    inventory_updated:
      type: "static"
      value: true
    equipment_info_unknown:
      type: "static"
      value: false
      
  find_correct_workshop:
    at_correct_workshop:
      type: "conditional"
      condition:
        type: "response_field"
        field: "location"
        value: null
      true_value: false
      false_value: true
    workshops_discovered:
      type: "static"
      value: true
    workshop_location_known:
      type: "static"
      value: true
    need_specific_workshop:
      type: "static"
      value: false
      
  transform_material:
    has_refined_materials:
      type: "conditional"
      condition:
        type: "response_field"
        field: "success"
      true_value: true
      false_value: false
    inventory_updated:
      type: "static"
      value: true
      
  find_workshops:
    workshops_discovered:
      type: "conditional"
      condition:
        type: "response_field"
        field: "location"
        value: null
      true_value: false
      false_value: true
    workshop_location_known:
      type: "conditional"
      condition:
        type: "response_field"
        field: "location"
        value: null
      true_value: false
      false_value: true
    at_workshop:
      type: "static"
      value: false
      
  evaluate_weapon_recipes:
    equipment_info_known:
      type: "static"
      value: true
    recipe_known:
      type: "static"
      value: true
    best_weapon_selected:
      type: "conditional"
      condition:
        type: "response_field"
        field: "selected_weapon"
        value: null
      true_value: false
      false_value: true
    craftable_weapon_identified:
      type: "conditional"
      condition:
        type: "response_field"
        field: "selected_weapon"
        value: null
      true_value: false
      false_value: true

# World state update patterns
world_state_updates:
  # Common update patterns that can be reused
  movement_update:
    at_target_location: true
    
  combat_victory:
    monster_present: false
    monster_defeated: true
    has_hunted_monsters: true
    
  combat_defeat:
    monster_present: false
    has_hunted_monsters: true
    
  rest_recovery:
    character_safe: true
    needs_rest: false